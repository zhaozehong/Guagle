<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:HelperLib="clr-namespace:Zehong.CShart.Solution.HelperLib">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/HelperLib;Component/Resources/Brushes.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <HelperLib:EnumToFriendlyNameConverter x:Key="EnumItemsConverter"/>

  <!-- ComboBox -->
  <Style TargetType="{x:Type ComboBox}">
    <Setter Property="Margin" Value="4,2"/>
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
    <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
            <ToggleButton ClickMode="Press" Focusable="false"
                          Template="{DynamicResource ComboBoxToggleButton}"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Left" VerticalAlignment="Center" IsHitTestVisible="False" Margin="3,-4,23,-4"
                              Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>

            <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
            <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="3,3,23,3"
                     Style="{x:Null}" Focusable="True" Background="{StaticResource TransparentBrush}"
                     Template="{DynamicResource ComboBoxTextBox}" IsReadOnly="{TemplateBinding IsReadOnly}"/>

            <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
              <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                <ScrollViewer Margin="4,6,4,6" Style="{DynamicResource PropertyGridScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

                  <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <!-- This forces the DropDown to have a minimum size if it is empty -->
            <Trigger Property="HasItems" Value="false">
              <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
              <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
              <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false"/>
              <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
              <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxLocalizationStyle" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding Path=., Converter={StaticResource EnumItemsConverter}}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ComboBoxTransparentStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
    <Setter Property="Background" Value="{StaticResource TransparentBrush}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}"/>
  </Style>
  <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
    <Setter Property="Margin" Value="1"/>
    <Setter Property="MinWidth" Value="25"/>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
  </Style>
  
  <!-- WPG ComboBox Toggle Button -->
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="20"/>
      </Grid.ColumnDefinitions>
      <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
      <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource WindowBackgroundBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
      <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Fill" Value="{DynamicResource MouseOverBrush}" TargetName="Rectangle"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter Property="Fill" Value="{DynamicResource PressedBrush}" TargetName="Rectangle"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle"/>
        <Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
        <Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <!-- WPG ComboBox TextBox -->
  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
    <!-- This must be named as PART_ContentHost -->
    <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
  </ControlTemplate>
</ResourceDictionary>